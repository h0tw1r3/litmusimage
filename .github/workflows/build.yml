---
name: Build images

on:
  workflow_call:
    inputs:
      image:
        default: ".*"
        type: string
      tag:
        default: ".*"
        type: string
      dockerfile:
        default: ".*"
        type: string
      refresh:
        type: boolean
        default: false
      push:
        type: boolean
        default: true
  workflow_dispatch:
    inputs:
      image:
        description: image (regex)
        type: string
        default: ""
      tag:
        description: and tag (regex)
        type: string
        default: ""
      dockerfile:
        description: or dockerfile (regex)
        type: string
        default: ""
      refresh:
        description: build even if base image unchanged
        type: boolean
        default: false
      push:
        description: push to registry (default branch only)
        type: boolean
        default: true

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  REGISTRY_USERNAME: ${{ github.actor }}
  REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
  REPOSITORY: h0tw1r3/litmusimage

jobs:
  select:
    name: Select ${{ github.sha }}
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      push: ${{ steps.branch-names.outputs.is_default }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Create matrix from json
        id: set-matrix
        shell: python {0}
        run: |
          import json
          import os
          from re import match
          
          # parse workflow inputs
          image = "${{ inputs.image }}"
          tag = "${{ inputs.tag }}"
          dockerfile = "${{ inputs.dockerfile }}"
          refresh = True if "${{ inputs.refresh }}" == "true" else False
          
          # output
          matrix = []
          
          # load matrix json
          with open('images.json') as fd:
              builds = json.load(fd)
              for i, v in enumerate(builds):
                  builds[i]['image_tag'] = f"{v['image']}:{v['tag']}"
                  builds[i]['refresh'] = refresh
          
          if dockerfile:
              dockerfile = f"^{dockerfile}$"
              for _, v in enumerate(builds):
                  if match(dockerfile, v['dockerfile']):
                      # always refresh
                      v['refresh'] = True
                      matrix.append(v)
          
          if image or tag:
              image = f"^{image}$" if image else image
              tag = f"^{tag}$" if tag else tag
              for _, v in enumerate(builds):
                  if match(image, v['image']) and match(tag, v['tag']):
                      matrix.append(v)
          
          # unique list of images
          matrix = list({v['image_tag']:v for v in matrix}.values())

          if len(matrix) == 0:
              print("::error title::failed to build matrix, no images matched?")
              raise SystemExit(1)

          with open(os.environ['GITHUB_OUTPUT'], 'a') as output:
              print('matrix=' + json.dumps({ 'include': matrix }), file=output)

      - if: inputs.push
        name: Get branch names
        id: branch-names
        uses: tj-actions/branch-names@v8

  image:
    needs: select
    timeout-minutes: 5
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 10
      fail-fast: false
      matrix: ${{fromJson(needs.select.outputs.matrix)}}
    steps:
      - name: Login to ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Set variables
        run: |
          echo "IMAGE_TAG=${{ env.REGISTRY }}/${{ env.REPOSITORY }}/${{ matrix.image }}:${{ matrix.tag }}" >> $GITHUB_ENV
          echo "PULL_IMAGE=${{ matrix.base_image }}:${{ matrix.base_tag }}" >> $GITHUB_ENV

      - name: Pull image ${{ matrix.base_image }}:${{ matrix.base_tag }}
        run: |
          docker pull ${PULL_IMAGE}
          echo "BASE_ID=$(docker images -q ${PULL_IMAGE})" >> $GITHUB_ENV

      - if: matrix.refresh == false
        name: Pull and compare image ${{ matrix.image }}:${{ matrix.tag }}
        id: compare_image
        run: |
          if docker pull $IMAGE_TAG ; then
            IMAGE_BASE_ID=$(docker inspect ${IMAGE_TAG} --format "{{ index .Config.Labels \"base_image\"}}" || true)
            if [[ "${IMAGE_BASE_ID}" == "${BASE_ID}" ]] ; then
              echo "no updates to base image since last build, aborting"
              exit 0
            fi
            echo "::notice title=::building docker image, base image id does not match"
          else
            echo "::notice title=::building docker image, litmusimage not found"
          fi
          echo "need_refresh=true" >> $GITHUB_OUTPUT

      - if: steps.compare_image.outputs.need_refresh || steps.compare_image.outcome == 'skipped'
        name: Checkout repository
        id: checkout_repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - if: steps.checkout_repo.conclusion == 'success'
        name: Build ${{ matrix.image }}:${{ matrix.tag }}
        id: build_image
        run: |
          docker build --rm --no-cache -t ${IMAGE_TAG} . --label "base_image=${BASE_ID}" -f ${{ matrix.dockerfile }}.dockerfile --build-arg BASE_IMAGE_TAG=${{ matrix.base_tag }} --build-arg OS_TYPE=${{ matrix.base_image }}

      - if: needs.select.output.push == 'true'
        name: Push ${{ matrix.image }}:${{ matrix.tag }} to ${{ env.REGISTRY }}/${{ env.REPOSITORY }}
        run: |
          docker push $IMAGE_TAG
