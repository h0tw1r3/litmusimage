---
name: Build images

on:
  workflow_call:
    inputs:
      image:
        default: ".*"
        type: string
      tag:
        default: ".*"
        type: string
      dockerfile:
        default: ".*"
        type: string
      refresh:
        type: boolean
        default: false
      push:
        type: boolean
        default: true
  workflow_dispatch:
    inputs:
      image:
        description: image (regex)
        type: string
        default: ".*"
      tag:
        description: tag (regex)
        type: string
        default: ".*"
      dockerfile:
        description: dockerfile (regex)
        type: string
        default: ".*"
      refresh:
        description: build even if base unchanged
        type: boolean
        default: false
      push:
        description: push to registry
        type: boolean
        default: true

env:
  REGISTRY: ghcr.io
  REGISTRY_USERNAME: ${{ github.actor }}
  REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
  REPOSITORY: h0tw1r3/litmusimage

jobs:
  select:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Create matrix from json
        id: set-matrix
        run: |
          image="${{ inputs.image }}"
          tag="${{ inputs.tag }}"
          dockerfile="${{ inputs.dockerfile }}"
          matrix=$(jq --arg image "^${image}\$" --arg tag "^${tag}\$" --arg dockerfile "^${dockerfile}\$" 'map( . | select((.image? | match($image)) and (.tag? | match($tag)) and (.dockerfile? | match($dockerfile))))' images.json)
          echo "matrix={\"include\":$(echo $matrix)}" >> $GITHUB_OUTPUT
          if [ "${matrix}" == "[]" ] ; then
            echo "::error title::failed to build matrix, no images matched?"
            exit 1
          fi
  image:
    needs: select
    timeout-minutes: 5
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.select.outputs.matrix)}}
    steps:
      - name: Login to ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Set variables
        run: |
          echo "IMAGE_TAG=${{ env.REGISTRY }}/${{ env.REPOSITORY }}/${{ matrix.image }}:${{ matrix.tag }}" >> $GITHUB_ENV
          echo "PULL_IMAGE=${{ matrix.base_image }}:${{ matrix.base_tag }}" >> $GITHUB_ENV

      - name: Pull image ${{ matrix.base_image }}:${{ matrix.base_tag }}
        run: |
          docker pull ${PULL_IMAGE}
          echo "BASE_ID=$(docker images -q ${PULL_IMAGE})" >> $GITHUB_ENV

      - if: inputs.refresh == false
        name: Pull and compare image ${{ matrix.image }}:${{ matrix.tag }}
        id: compare_image
        run: |
          if docker pull $IMAGE_TAG ; then
            IMAGE_BASE_ID=$(docker inspect ${IMAGE_TAG} --format "{{ index .Config.Labels \"base_image\"}}" || true)
            if [[ "${IMAGE_BASE_ID}" == "${BASE_ID}" ]] ; then
              echo "no updates to base image since last build, aborting"
              exit 0
            fi
            echo "::notice title=::building docker image, base image id does not match"
          else
            echo "::notice title=::building docker image, litmusimage not found"
          fi
          echo "need_refresh=true" >> $GITHUB_OUTPUT

      - if: steps.compare_image.outputs.need_refresh || steps.compare_image.outcome == 'skipped'
        name: Checkout repository
        id: checkout_repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - if: steps.checkout_repo.conclusion == 'success'
        name: Build ${{ matrix.image }}:${{ matrix.tag }}
        id: build_image
        run: |
          docker build --rm --no-cache -t ${IMAGE_TAG} . --label "base_image=${BASE_ID}" -f ${{ matrix.dockerfile }}.dockerfile --build-arg BASE_IMAGE_TAG=${{ matrix.base_tag }} --build-arg OS_TYPE=${{ matrix.base_image }}

      - if: steps.build_image.conclusion == 'success' && inputs.push
        name: Get branch names
        id: branch-names
        uses: tj-actions/branch-names@v8

      - if: steps.branch-names.outputs.is_default == 'true'
        name: Push ${{ matrix.image }}:${{ matrix.tag }} to ${{ env.REGISTRY }}/${{ env.REPOSITORY }}
        run: |
          docker push $IMAGE_TAG
